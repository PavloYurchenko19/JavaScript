// - Створити клас або функцію конструктор, за допомоги якої можна створювати об'єкти наступного вигляду.
// Конструктор повинен приймати значення для кожної властивості, в т.ч і для властивостей внутрішніх об'єктів
//
// {
//     id: 1,
//         name: 'Leanne Graham',
//     username: 'Bret',
//     email: 'Sincere@april.biz',
//     address: {
//     street: 'Kulas Light',
//         suite: 'Apt. 556',
//         city: 'Gwenborough',
//         zipcode: '92998-3874',
//         geo: {
//         lat: '-37.3159',
//             lng: '81.1496'
//     }
// },
//     phone: '1-770-736-8031 x56442',
//         website: 'hildegard.org',
//     company: {
//     name: 'Romaguera-Crona',
//         catchPhrase: 'Multi-layered client-server neural-net',
//         bs: 'harness real-time e-markets'
// }
// }

class bigObject {


    constructor(id, name, username, email, street, suite, city, zipcode, lat, lng, phone, website, nameCompany, catchPhrase, bs) {
        this.id = id;
        this.name = name;
        this.username = username;
        this.email = email;
        this.address = {
            street: street,
            suite: suite,
            city: city,
            zipcode: zipcode,
            geo: {
                lat: lat,
                lng: lng,
            }

        };
        this.phone = phone;
        this.website = website;

        this.company = {
            name: nameCompany,
            catchPhrase: catchPhrase,
            bs: bs,

        };
    }
}

let bigO = new bigObject(1, 'Leanne Graham', 'Bret', 'Sincere@april.biz', 'Kulas Light', 'Apt. 556', 'Gwenborough', '92998-3874', '-37.3159', '81.1496', '1-770-736-8031 x56442', 'hildegard.org', 'Romaguera-Crona', 'Multi-layered client-server neural-net', 'harness real-time e-markets');
console.log(bigO);

// -  Створити функцію конструктор / клас  який описує об'єкт тегу
// Поля :
//     -назва тегу ()
// - опис його дій
// - масив з атрибутами (2-3 атрибути максимум)
// Кожен атрибут описати як окремий який буде містити
// -назву атрибуту
// -опис дії атрибуту
// інформацію брати з htmlbook.ru
//
// Таким чином описати теги
// -a
// -div
// -h1
// -span
// -input
// -form
// -option
// -select
// Приклад результуючого об'єкту
// {
//     titleOfTag: 'area',
//         action: `Каждый элемент <area> определяет активные области изображения, которые являются ссылками...`,
//     attrs: [
//     {titleOfAttr: 'accesskey', actionOfAttr: 'Переход к области с помощью комбинации клавиш'},
//     {/*some props and values*/},
//     {/*...*/},
//     {/*...*/},
// ]
//
// }
class DescriptionTags {
    constructor(name, descr, attrName1, descriptionAttrb1, attrName2, descriptionAttrb2, attrName3, descriptionAttrb3) {

        this.name = name;
        this.descr = descr;
        this.attr1 = {name: attrName1, descriptionAttrb: descriptionAttrb1};
        this.attr2 = {name: attrName2, descriptionAttrb: descriptionAttrb2};
        this.attr3 = {name: attrName3, descriptionAttrb: descriptionAttrb3};
    }
}

let attrA = new DescriptionTags("a", "Тег  является одним из важных элементов HTML и предназначен для создания ссылок. В зависимости от присутствия атрибутов name или href тег  устанавливает ссылку или якорь. Якорем называется закладка внутри страницы, которую можно указать в качестве цели ссылки. При использовании ссылки, которая указывает на якорь, происходит переход к закладке внутри веб-страницы.",
    "name","Устанавливает имя якоря внутри документа.","href","Задает адрес документа, на который следует перейти.","rel","Отношения между ссылаемым и текущим документами.")
let attrDiv = new DescriptionTags("div", "Элемент  является блочным элементом и предназначен для выделения фрагмента документа с целью изменения вида содержимого. Как правило, вид блока управляется с помощью стилей. Чтобы не описывать каждый раз стиль внутри тега, можно выделить стиль во внешнюю таблицу стилей, а для тега добавить атрибут class или id с именем селектора.",
    "align", "Задает выравнивание содержимого тега .", "title", "Добавляет всплывающую подсказку к содержимому.","class","Определяет имя класса, которое позволяет связать тег со стилевым оформлением.");

let attrH1 = new DescriptionTags("h1", "Заголовок первого уровня", "align", "Определяет выравнивание заголовка.", "rel", "Отношения между ссылаемым и текущим документами.");
let attrSpan = new DescriptionTags("span", "Тег span предназначен для определения строчных элементов документа. В отличие от блочных элементов, таких как table, p или div, с помощью тега span можно выделить часть информации внутри других тегов и установить для нее свой стиль. Например, внутри абзаца (тега p) можно изменить цвет и размер первой буквы, если добавить начальный и конечный тег span и определить для него стиль текста. Чтобы не описывать каждый раз стиль внутри тега, можно выделить стиль во внешнюю таблицу стилей, а для тега добавить атрибут class или id с именем селектора.",
    "class", "Определяет имя класса, которое позволяет связать тег со стилевым оформлением.", "contenteditable", "Сообщает, что элемент доступен для редактирования пользователем.", "dir", "Задает направление и отображение текста — слева направо или справа налево.");
let attrInput = new DescriptionTags("input", "Тег input является одним из разносторонних элементов формы и позволяет создавать разные элементы интерфейса и обеспечить взаимодействие с пользователем. Главным образом input предназначен для создания текстовых полей, различных кнопок, переключателей и флажков. Хотя элемент input не требуется помещать внутрь контейнера form, определяющего форму, но если введенные пользователем данные должны быть отправлены на сервер, где их обрабатывает серверная программа, то указывать form обязательно. То же самое обстоит и в случае обработки данных с помощью клиентских приложений, например, скриптов на языке JavaScript.",
    "accept", "Устанавливает фильтр на типы файлов, которые вы можете отправить через поле загрузки файлов.", "accesskey", "Переход к элементу с помощью комбинации клавиш.", "align", "Определяет выравнивание изображения.");
let attrForm = new DescriptionTags("form", "Связывает поле с формой по её идентификатору. Такая связь необходима в случае, когда поле располагается за пределами form, например, при создании её программно или по соображениям дизайна.",
    "hidden", "Скрывает содержимое элемента от просмотра.", "id", "Указывает имя стилевого идентификатора.", "lang", "Браузер использует значение параметра для правильного отображения некоторых национальных символов.");
let attrOption = new DescriptionTags("option", "Тег option определяет отдельные пункты списка, создаваемого с помощью контейнера select. Ширина списка определяется самым широким текстом, указанным в теге  а также может изменяться с помощью стилей. Если планируется отправлять данные списка на сервер, то требуется поместить элемент select внутрь формы. Это также необходимо, когда к данным списка идет обращение через скрипты.",
    "disabled", "Заблокировать для доступа элемент списка.", "label", "Указание метки пункта списка.", "selected", "Заранее устанавливает определенный пункт списка выделенным.",);
let attrSelect = new DescriptionTags("select", "Тег select позволяет создать элемент интерфейса в виде раскрывающегося списка, а также список с одним или множественным выбором, как показано далее.",
    "accesskey", "Позволяет перейти к списку с помощью некоторого сочетания клавиш.", "autofocus", "Устанавливает, что список получает фокус после загрузки страницы.", "disabled", "Блокирует доступ и изменение элемента.");
console.log(attrA);
console.log(attrDiv);
console.log(attrH1);
console.log(attrSpan);
console.log(attrInput);
console.log(attrForm);
console.log(attrOption);
console.log(attrSelect);